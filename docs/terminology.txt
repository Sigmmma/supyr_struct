
-------------------------------------------------------------------------------
Terminology:

Block ------- An object designed to hold and express parsed binary data.
              Blocks act as nodes in trees with the capacity to be a
              parent node, meaning they hold other nodes.

BlockDef ---- An object which builds a descriptor from given information,
              checks it for errors, and makes sure it contains certain
              entries while generating other entries automatically.

descriptor -- A dictionary which serves as a collection of static attributes
              that describe parsed binary data expressed as a node, one
              of these being a FieldType instance under the key 'TYPE'.

DataBlock --- A subclass of Block which is intended to hold and express
              only one data value, such as a string or int. Subclasses
              of this Block include WrapperBlock, BoolBlock, and EnumBlock.

FieldType --- An immutable object with serveral properties that describe
              a specific kind of node. These properties are mostly bools,
              like is_str, is_struct, is_array, is_enum, is_block, etc,
              but there are also properties like 'enc'(for string and
              numerical encodings), 'endian'(the endianness of the bytes),
              and 'delimiter'(the character a string is delimited with).

              They also store a parser(for reading bytes from a buffer),
              a decoder(for turning those bytes into a python object),
              an encoder(for turning a python object into bytes), and a
              serializer(for writing those bytes to a buffer).

              See parsers.txt, serializers.txt, decoders.txt, encoders.txt,
              sanitizer.txt, and sizecalc.txt for more information.

FrozenDict -- An immutable subclass of dict which runs an 'immutify'
              routine on its contents on instantiation.
              Immutify replaces mutable objects with an immutable
              equivalent, making a FrozenDict as immutable as possible.

ListBlock --- A subclass of list and Block. Behaves similarly to a list and
              utilizes a descriptor to give names to each of its indices.

nodepath ---- A string that details a path through the nodes of a tree of
              Blocks to some target attribute.

              Take this nodepath for example: '..test.val'
              from here(.), go to the parent(.), go to the 'test' attribute
              of that parent, and return the 'val' attribute of that.

              See the nodepaths.txt file for more information

subtree ----- A subtree is an object parented to a Block in a specific
              way which is also parsed and written in a sequence that
              differs from regular nodes.

              Rather than being placed into one of the indices of its
              parent, a subtree is placed into its SUBTREE attribute.
              The SUBTREE attribute can have an alias name, but it is
              internally stored as an objects attribute rather than a
              list entry.

              Parsers and serializers finish processing the tree they are
              currently in, then proceed to read/write all subtrees
              encountered in the order that they were encountered.

              If a field detects it's a "subtree_root" it will pass around a
              list in kwargs under the key "subtree_parents", which is passed
              to the parser/serializer of each subnode within this node.
              If one of these subnodes has a SUBTREE entry in its descriptor,
              the subnode will be appended to kwargs["subtree_root"].

              After all the parsers/serializers for all nodes within a Block
              have been called, the parents list will be looped over by the
              parser/serializer that built it and calls the parser/serializer
              of the SUBTREE attribute of each Block in parents.When
              kwargs is passed to the parser/serializer, "subtree_parents"
              is removed from kwargs to prevent infinite recursion.

              This change of read/write order is for situations where
              one may, for example, have an array of 4 Y structures
              where each struct describes another array of 4 Z structures,
              but the first array of 4 is stored contiguously, so the
              serialized arrangement of the structures looks like this:
                  [ AY, BY, CY, DY ],
                  [ AZ1, AZ2, AZ3, AZ4 ], 
                  [ BZ1, BZ2, BZ3, BZ4 ], 
                  [ CZ1, CZ2, CZ3, CZ4 ], 
                  [ DZ1, DZ2, DZ3, DZ4 ]
              This occurs often, and having a single SUBTREE attribute
              takes care of any number of structures that need to be
              read/written in this order since you can use an array or
              container of any size for the SUBTREE attribute.

-------------------------------------------------------------------------------